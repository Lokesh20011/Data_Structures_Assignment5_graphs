#Detect Cycle in a Directed Graph
from collections import defaultdict

class Graph:
    def __init__(self, vertices):
        self.graph = defaultdict(list)
        self.vertices = vertices
    
    def add_edge(self, u, v):
        self.graph[u].append(v)
    
    def is_cyclic_util(self, node, visited, rec_stack):
        visited[node] = True
        rec_stack[node] = True
        
        for neighbor in self.graph[node]:
            if not visited[neighbor]:
                if self.is_cyclic_util(neighbor, visited, rec_stack):
                    return True
            elif rec_stack[neighbor]:
                return True
        
        rec_stack[node] = False
        return False
    
    def is_cyclic(self):
        visited = [False] * self.vertices
        rec_stack = [False] * self.vertices
        
        for node in range(self.vertices):
            if not visited[node]:
                if self.is_cyclic_util(node, visited, rec_stack):
                    return True
        
        return False

# Usage example with user input:
vertices = int(input("Enter the number of vertices: "))
g = Graph(vertices)
edges = int(input("Enter the number of edges: "))

for _ in range(edges):
    u, v = map(int, input("Enter an edge (u v): ").split())
    g.add_edge(u, v)

if g.is_cyclic():
    print("Graph contains a cycle")
else:
    print("Graph does not contain a cycle")