#Depth First Traversal for a Graph:
from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
    
    def add_edge(self, u, v):
        self.graph[u].append(v)
    
    def DFS_util(self, node, visited):
        visited[node] = True
        print(node, end=' ')
        
        for neighbor in self.graph[node]:
            if not visited[neighbor]:
                self.DFS_util(neighbor, visited)
    
    def DFS(self, start):
        visited = [False] * (max(self.graph) + 1)
        self.DFS_util(start, visited)

# Usage example with user input:
g = Graph()
edges = int(input("Enter the number of edges: "))

for _ in range(edges):
    u, v = map(int, input("Enter an edge (u v): ").split())
    g.add_edge(u, v)

start_node = int(input("Enter the starting node for DFS: "))
print("Depth First Traversal starting from vertex", start_node)
g.DFS(start_node)